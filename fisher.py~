import numpy as np
import matplotlib.pyplot as plt
import os


def fisher(dRi, dRj, invcov):
    """Fuction for calculation of fisher matrix. Shape
    of dRi should be increasing ell along axis 0, and
    parameters along axis 1.
    """

    print "dRi:", dRi.shape
    print "dRj:", dRj.shape
    print "invcov:", invcov.shape

    F = np.dot(dRi.T, np.dot(invcov, dRj))
    return F


class CLASS(object):
    """Class for mainpulating CLASS CMB spectra. Useful 
    for calculating lensing templates.
    """
    def __init__(self, classdir, cl_fname=None, cl_lensed_fname=None,
                 cls_fname=None, clt_fname=None, fmt='class'):
        data_dir = os.path.join(os.path.abspath(classdir))
        read = lambda fname: os.path.join(data_dir, fname)
        if not cl_fname is None:
            self.cl = np.loadtxt(read(cl_fname))
        if not cl_lensed_fname is None:
            self.cl_lensed = np.loadtxt(read(cl_fname))
        if not cls_fname is None:
            self.cls = np.loadtxt(read(cls_fname))
        if not clt_fname is None:
            self.clt = np.loadtxt(read(clt_fname))
        return

    def get_lensing_template(self):
        return 

    def read_class(fname):
    """
    note that this function switched the order of the spectra
    output by class and changes from D_\ell -> C_\ell.
    Also pads by 2 zeros for ell = 0, 1. 

    Exception handles the case of a cl_lensed.dat file in which 
    case there are three additional columsn corresponding to the 
    lensing potential and its cross-correlations. 
 
    returns spectra: ell, TT, EE, BB, TE.                              
    """
    if fmt == 'class':
        try:
            ell, TT, EE, BB, TE = np.loadtxt(fname, unpack=True)
        except ValueError:
            ell, TT, EE, BB, TE, _, _, _ = np.loadtxt(fname, unpack=True)
        #remove premultiplying factor.
        factor = (ell + 1) * ell / 2. / np.pi
        TT /= factor
        EE /= factor
        BB /= factor
        TE /= factor
        return ell, TT, EE, BB, TE

    

def get_lensing_template(lensed, primordial):
    """Calculate the lensing
    """

"""Read Full-mission specifications of the experiment.
"""
index, freqs, df, sens_p_uK_CMB, beam = np.loadtxt(os.path.join(cdir, "FM", "%s_characteristics.txt"%args.exp_name), unpack=True)

